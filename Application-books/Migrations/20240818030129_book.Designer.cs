// <auto-generated />
using System;
using Application_books.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application_books.Migrations
{
    [DbContext(typeof(ApplicationbooksContext))]
    [Migration("20240818030129_book")]
    partial class book
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application_books.Database.Entitties.AutorEntity", b =>
                {
                    b.Property<Guid>("IdAutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_autor");

                    b.Property<string>("Bibliografia")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("bibliografia");

                    b.Property<string>("NombreAutor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("autor");

                    b.Property<string>("UrlImg")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img_autor");

                    b.HasKey("IdAutor");

                    b.ToTable("autor", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.CalificacionEntity", b =>
                {
                    b.Property<Guid>("IdCalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_calificacion");

                    b.Property<Guid>("IdLibro")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_libro");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int")
                        .HasColumnName("puntuacion");

                    b.HasKey("IdCalificacion");

                    b.HasIndex("IdLibro");

                    b.HasIndex("IdUsuario");

                    b.ToTable("calificacion", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.ComentarioEntity", b =>
                {
                    b.Property<Guid>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_comentario");

                    b.Property<string>("Comentario")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha");

                    b.Property<Guid>("IdLibro")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_libro");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdComentario");

                    b.HasIndex("IdLibro");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.LibroEntity", b =>
                {
                    b.Property<Guid>("IdLibro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_libro");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("genero");

                    b.Property<Guid>("IdAutor")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_autor");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("titulo");

                    b.Property<string>("UrlImg")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img_libro");

                    b.Property<string>("UrlPdf")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("pdf_libro");

                    b.HasKey("IdLibro");

                    b.HasIndex("IdAutor");

                    b.ToTable("libros_book", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.ListaFavoritoEntity", b =>
                {
                    b.Property<Guid>("IdListaFavorito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_listafavorito");

                    b.Property<Guid>("IdLibro")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_libro");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdListaFavorito");

                    b.HasIndex("IdLibro");

                    b.HasIndex("IdUsuario");

                    b.ToTable("lista_favorito", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.MembresiaEntity", b =>
                {
                    b.Property<Guid>("IdMembresia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_membresia");

                    b.Property<bool>("ActivaMembresia")
                        .HasColumnType("bit")
                        .HasColumnName("activa_membresia");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_cancelacion");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_inicio");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdMembresia");

                    b.HasIndex("IdUsuario");

                    b.ToTable("membresia", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.UsuarioEntity", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("NombreUsuario")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cliente");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("password");

                    b.HasKey("IdUsuario");

                    b.ToTable("usuario", "dbo");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.CalificacionEntity", b =>
                {
                    b.HasOne("Application_books.Database.Entitties.LibroEntity", "Libro")
                        .WithMany("Calificaciones")
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application_books.Database.Entitties.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.ComentarioEntity", b =>
                {
                    b.HasOne("Application_books.Database.Entitties.LibroEntity", "Libro")
                        .WithMany()
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application_books.Database.Entitties.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.LibroEntity", b =>
                {
                    b.HasOne("Application_books.Database.Entitties.AutorEntity", "Autor")
                        .WithMany("Libros")
                        .HasForeignKey("IdAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.ListaFavoritoEntity", b =>
                {
                    b.HasOne("Application_books.Database.Entitties.LibroEntity", "Libro")
                        .WithMany()
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application_books.Database.Entitties.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.MembresiaEntity", b =>
                {
                    b.HasOne("Application_books.Database.Entitties.UsuarioEntity", "Usuario")
                        .WithMany("Membresia")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.AutorEntity", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.LibroEntity", b =>
                {
                    b.Navigation("Calificaciones");
                });

            modelBuilder.Entity("Application_books.Database.Entitties.UsuarioEntity", b =>
                {
                    b.Navigation("Membresia");
                });
#pragma warning restore 612, 618
        }
    }
}
